plugins {
    id 'java'
    id 'java-library'
    id 'signing'
    id 'maven-publish'
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id 'jacoco'
    id 'jacoco-report-aggregation'
    id "tech.medivh.plugin.publisher" version "1.2.3"
    id 'enterprises.iwakura.amber' version '1.0.0'
}

apply plugin: 'enterprises.iwakura.amber'

group 'enterprises.iwakura'
version '3.1.0'

repositories {
    mavenCentral()

    maven { url "https://m2.chew.pro/snapshots" }
    maven { url "https://s01.oss.sonatype.org/content/repositories/releases" }

    flatDir {
        dirs 'libs'
    }
}

dependencies {
    // JDA, Chewutils
    amber 'net.dv8tion:JDA:5.6.1'
    amber 'pw.chew:jda-chewtils:2.0-SNAPSHOT'

    // Personal libraries
    amber 'dev.mayuna:mayus-jda-utilities:3.5.0'
    amber 'dev.mayuna:mayus-library:3.1'
    amber 'dev.mayuna:mayus-json-utilities:2.1'

    amber 'enterprises.iwakura:ganyu:1.0.0'
    amber 'enterprises.iwakura:keqing-core:1.1.0'
    amber 'enterprises.iwakura:keqing-gson:1.1.0'
    amber 'enterprises.iwakura:keqing-snakeyaml:1.1.0'
    amber 'enterprises.iwakura:sigewine-core:2.2.1'
    amber 'enterprises.iwakura:sigewine-aop:2.2.1'
    amber 'enterprises.iwakura:sigewine-aop-sentry:2.2.1'
    implementation 'enterprises.iwakura:amber-core:1.0.1'
    amber 'enterprises.iwakura:irminsul:0.1.0'

    // GSON
    amber 'com.google.code.gson:gson:2.13.1'

    // Guava
    amber 'com.google.guava:guava:33.4.8-jre'

    // Database - Hibernate, SQLite, MySQL, PostgreSQL
    amber 'org.postgresql:postgresql:42.7.6'
    compileOnly platform("org.hibernate.orm:hibernate-platform:7.0.0.CR1")
    amber "org.hibernate.orm:hibernate-core"
    amber 'org.hibernate.orm:hibernate-processor:7.0.0.CR1'
    annotationProcessor 'org.hibernate.orm:hibernate-processor:7.0.0.CR1'
    amber "org.hibernate.orm:hibernate-hikaricp"
    amber "jakarta.transaction:jakarta.transaction-api"
    amber 'com.fasterxml.jackson.core:jackson-databind:2.15.3'
    amber 'org.xerial:sqlite-jdbc:3.46.0.0'
    amber 'com.mysql:mysql-connector-j:9.4.0'

    // HikariCP
    amber 'com.zaxxer:HikariCP:5.1.0'

    // SLF4J
    amber 'org.apache.logging.log4j:log4j-slf4j2-impl:2.23.1'
    amber 'org.apache.logging.log4j:log4j-api:2.23.1'
    amber 'org.apache.logging.log4j:log4j-core:2.23.1'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.+'
    annotationProcessor 'org.projectlombok:lombok:1.18.+'
    testCompileOnly 'org.projectlombok:lombok:1.18.+'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.+'

    // JUnit
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

medivhPublisher {
    groupId = project.group.toString()
    artifactId = project.name
    version = project.version.toString()
    pom {
        name = "modular-discord-bot"
        description = "Modular Discord Bot"
        url = "https://github.com/iwakura-enterprises/modular-discord-bot"
        licenses {
            license {
                name = "The MIT License"
                url = "https://opensource.org/license/mit"
            }
        }
        developers {
            developer {
                id = "mayuna"
                name = "Marek Lof"
                email = "uwulilmayu@gmail.com"
            }
        }
        scm {
            connection = "scm:git:"
            url = "https://github.com/iwakura-enterprises/modular-discord-bot.git"
        }
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        csv.required.set(true)
    }
}

// UTF-8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    manifest {
        attributes(
                'Main-Class': 'enterprises.iwakura.ganyu.test.Main',
        )
    }
}

task publishCloseAndRelease() {
    dependsOn 'cleanBuildMedivhMavenRepo'
    dependsOn 'uploadToSonatype'
    dependsOn 'publishDeployment'
}

shadowJar {
    archiveBaseName.set('modular-discord-bot')

    manifest {
        attributes 'Main-Class': 'enterprises.iwakura.modularbot.BootstrapMain'
    }

    archiveVersion.set(version)
    archiveClassifier.set('all')
    destinationDirectory = file("$buildDir/libs")
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier.set('javadoc')
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}

signing {
    useInMemoryPgpKeys(
            System.getenv("GPG_KEY_ID"),
            System.getenv("GPG_PRIVATE_KEY"),
            System.getenv("GPG_PASSWORD")
    )
}

java {
    withJavadocJar()
    withSourcesJar()
}

tasks.withType(JavaCompile) {
    options.release = 21
}

def generatedSrcDir = "${buildDir}/generated-src/main/java"

task generateVersionClass {
    doLast {
        def versionClassFile = file("${generatedSrcDir}/enterprises/iwakura/modularbot/Version.java")
        versionClassFile.parentFile.mkdirs()
        versionClassFile.text =
                """
package enterprises.iwakura.modularbot;

/**
 * Auto-generated version class.
 */
public final class Version {

    /**
     * Project's current version.
     */
    public static final String VERSION = "${project.version}";

    private Version() {
        // Prevent instantiation
    }
}
"""
    }
}

// Include generated sources in compilation
sourceSets {
    main {
        java {
            srcDir generatedSrcDir
        }
    }
}

// Make sure version class is generated before compilation
compileJava.dependsOn generateVersionClass